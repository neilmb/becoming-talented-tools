---
permalink: "/exercise/1.3/directed-tracking.js"
---

function getRandom(items) {
  return items[Math.floor(Math.random() * items.length)];
}

class DirectedTracking extends HTMLElement {

  INTERVAL_CHOICES = ["2nds", "3rds", "4ths", "5ths", "6ths", "7ths"];
  DIRECTION_CHOICES = ["Up", "Down"];
  NOTE_CHOICES = ["Do", "Re", "Mi", "Fa", "Sol", "La", "Si"];

  constructor() {
    super();
    this.generateSequence(); // sets this.directions and this.answer
  }

  // connect component
  connectedCallback() {
    this.attachShadow({ mode: 'open' });

    var template_content = `
      <link rel="stylesheet" href={{"/css/pico.min.css" | htmlBaseUrl }} />
      <p><span id="directions"></span></p>

      <details id="details">
        <summary>Answer</summary>
        <p><span id="answer"></span></p>
      </details>

      <button>Choose again</button>
    `;

    this.shadowRoot.innerHTML = template_content;

    this.directions_span = this.shadowRoot.querySelector("span#directions");
    this.answer_span = this.shadowRoot.querySelector("span#answer");

    this.shadowRoot.querySelector("button").addEventListener("click", this.buttonClicked.bind(this));

    this.render();
  }

  render() {
    this.directions_span.textContent = this.directions;
    this.answer_span.textContent = this.answer;
  }

  generateSequence() {
    // generate a sequence of steps from a starting note and compute the final
    // note
    this.directions = "Starting from Do go up a 3rd.";
    this.answer = "Mi";
  }

  buttonClicked(event) {
    this.shadowRoot.querySelector("#details").removeAttribute("open");
    this.generateSequence();
    this.render();
  }
}

customElements.define( 'directed-tracking', DirectedTracking );
